#!/bin/bash
###############################################################################
# This script is the command that is executed every run.
# Check the examples in examples/
#
# This script is run in the execution directory (execDir, --exec-dir).
#
# PARAMETERS:
# $1 is the candidate configuration number
# $2 is the instance ID
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters to the run
#
# RETURN VALUE:
# This script should print one numerical value: the cost that must be minimized.
# Exit with 0 if no error, with 1 in case of error
###########main####################################################################
EXE=./source/Main.py

# Fixed parameters that should be always passed to the algorithm.
# The time to be used is always 5 seconds, and we want only one run:
FIXED_PARAMS=""

CONFIG_ID="$1"
INSTANCE_ID="$2"
SEED="$3"
INSTANCE="$4"

# All other parameters are the candidate parameters to be passed to program
shift 4 || exit 1
CONFIG_PARAMS=$*

STDOUT=c${CONFIG_ID}-${INSTANCE_ID}.stdout
STDERR=c${CONFIG_ID}-${INSTANCE_ID}.stderr

# In case of error, we print the current time:
error() {
    echo "`TZ=UTC date`: error: $@" >&2
    exit 1
}

#if [ ! -x "${EXE}" ]; then
#    error "${EXE}: not found or not executable (pwd: $(pwd))"
#fi

#LOGS=c${CONFIG_ID}-${INSTANCE_ID}.log
#DAT_FILE=c${CONFIG_ID}-${INSTANCE_ID}.dat
#touch ${DAT_FILE}

# If the program just prints a number, we can use 'exec' to avoid
# creating another process, but there can be no other commands after exec.
#exec $EXE ${FIXED_PARAMS} -i $INSTANCE ${CONFIG_PARAMS}
# exit 1
# 
# Otherwise, save the output to a file, and parse the result from it.
# (If you wish to ignore segmentation faults you can use '{}' around
# the command.)
#python -m scoop $EXE -v ${CONFIG_PARAMS} --datfile ${DAT_FILE} > ${LOGS} 2>&1
#echo $EXE $*
#python $EXE -v ${CONFIG_PARAMS}
#python $EXE -v ${CONFIG_PARAMS} --datfile ${DAT_FILE} > ${LOGS} 2>&1

python $EXE $INSTANCE ${CONFIG_PARAMS} > ${STDOUT} 2>&1
#exit 1

error() {
    echo "`TZ=UTC date`: error: $@"
    exit 1
}

# This is an example of reading a number from the output.
# It assumes that the objective value is the first number in
# the first column of the last line of the output.
if [ -s "${STDOUT}" ]; then
    #COST=$(cat "${STDOUT}" | grep -e '^[0-9]' | cut -f1)
    COST=$(tail -n 1 ${STDOUT} | grep -e '^[[:space:]]*[+-]\?[0-9]' | cut -f1)
    echo "$COST"
    # use echo "-$COST" to maximize
    # Negative because score is maximised but irace minimises.
    rm -f "${STDOUT}" "${STDERR}"
    exit 0
else
    error "${STDOUT}: No such file or directory"
fi
